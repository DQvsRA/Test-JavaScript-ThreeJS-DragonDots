{
	"textures":
	{
	},
	"scenes":
	{
		"dragon_lowpoly_json":
		{
			"shaders":
			{
				"m_lambert2SG1":
				{
					"setShader": "(function(instance, resetShader){var shader = instance.global.shaders.m_lambert2SG1;if (resetShader != shader.resetShader){resetShader();gl.useProgram(shader.program);gl.enableVertexAttribArray(0);gl.enableVertexAttribArray(1);}var uniform = instance.shaders.m_lambert2SG1.uniform;if (instance.renderSequence != shader.sequence){shader.sequence = instance.renderSequence;gl.uniform4fv(shader._b, uniform._b);}})",
					"resetShader": "(function(){gl.disableVertexAttribArray(0);gl.disableVertexAttribArray(1);})",
					"sequence": 0
				}
			},
			"initGlobal": "(function(global, data){var vsm_lambert2SG1 ='precision highp float;\\nuniform vec4 _b[4];\\nuniform vec4 _c[7];\\nattribute vec3 _1;\\nattribute vec3 _0;\\nvarying vec4 _d;\\nvoid main()\\n{\\nvec3 a = _0;\\nvec3 b = _1;\\nvec3 c = _c[0].xyz * a.x + _c[1].xyz * a.y + _c[2].xyz * a.z + _c[3].xyz;\\ngl_Position = _b[0] * c.x + _b[1] * c.y + _b[2] * c.z + _b[3];\\nvec3 d = (_c[4].xyz * b.x + _c[5].xyz * b.y + _c[6].xyz * b.z);\\nvec3 e = d * d;\\nvec3 f = d * inversesqrt(e.x + e.y + e.z) * vec3(-0.408248, 0.408248, 0.816497);\\nvec3 g = vec3(max(f.x + f.y + f.z, 0.0) * 0.8) * 0.5;\\n_d = vec4(g, 1.0);\\n}\\n';var psm_lambert2SG1 ='precision mediump float;\\nvarying vec4 _d;\\nvoid main()\\n{\\ngl_FragColor = _d;\\n}\\n';gl.bindBuffer(gl.ARRAY_BUFFER, global.shaderInputBuffer0 = gl.createBuffer());gl.bufferData(gl.ARRAY_BUFFER, new Int8Array(data, 0, 360000), gl.STATIC_DRAW);gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, global.indexBuffer0 = gl.createBuffer());gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Int8Array(data, 360000, 30000), gl.STATIC_DRAW);var shaders = global.shaders;{var shader = shaders.m_lambert2SG1;var vertexShader = inka3d.createVertexShader(vsm_lambert2SG1, \"mesh, shader 'lambert2SG1'\");var pixelShader = inka3d.createPixelShader(psm_lambert2SG1, \"mesh, shader 'lambert2SG1'\");var program = shader.program = gl.createProgram();gl.attachShader(program, vertexShader);gl.attachShader(program, pixelShader);gl.bindAttribLocation(program, 1, '_1');gl.bindAttribLocation(program, 0, '_0');gl.linkProgram(program);gl.deleteShader(vertexShader);gl.deleteShader(pixelShader);shader._b = gl.getUniformLocation(program, '_b');shader._c = gl.getUniformLocation(program, '_c');}})",
			"doneGlobal": "(function(global){gl.deleteBuffer(global.shaderInputBuffer0);gl.deleteBuffer(global.indexBuffer0);gl.deleteProgram(global.shaders.m_lambert2SG1.program);})",
			"render": {
				"a_0": "(function(renderJob, resetShader){var instance = renderJob.instance;var global = instance.global;var shader = global.shaders.m_lambert2SG1;if (resetShader != shader.resetShader || instance.sequence != shader.sequence)shader.setShader(instance, resetShader);var transfer = instance.shaders.m_lambert2SG1.transfer;var _a = transfer._a;var fworldMatrix = renderJob.frenderJob;var _c = instance.fu0_28;var a = fworldMatrix[0];var b = fworldMatrix[1];var c = fworldMatrix[2];var d = fworldMatrix[3];var e = fworldMatrix[4];var f = fworldMatrix[5];var g = fworldMatrix[6];var h = fworldMatrix[7];var i = fworldMatrix[8];var j = fworldMatrix[9];var k = fworldMatrix[10];var l = fworldMatrix[11];var m = fworldMatrix[12];var n = fworldMatrix[13];var o = fworldMatrix[14];var p = fworldMatrix[15];var q = _a[0];var r = _a[1];var s = _a[2];var t = _a[3];var u = _a[4];var v = _a[5];var w = _a[6];var x = _a[7];var y = _a[8];var z = _a[9];var A = _a[10];var B = _a[11];var C = _a[12];var D = _a[13];var E = _a[14];var F = _a[15];var G = q * a + u * b + y * c + C * d;var H = r * a + v * b + z * c + D * d;var I = s * a + w * b + A * c + E * d;var J = q * e + u * f + y * g + C * h;var K = r * e + v * f + z * g + D * h;var L = s * e + w * f + A * g + E * h;var M = q * i + u * j + y * k + C * l;var N = r * i + v * j + z * k + D * l;var O = s * i + w * j + A * k + E * l;_c[0] = G;_c[1] = H;_c[2] = I;_c[4] = J;_c[5] = K;_c[6] = L;_c[8] = M;_c[9] = N;_c[10] = O;_c[12] = q * m + u * n + y * o + C * p;_c[13] = r * m + v * n + z * o + D * p;_c[14] = s * m + w * n + A * o + E * p;_c[16] = K * O - L * N;_c[17] = L * M - J * O;_c[18] = J * N - K * M;_c[20] = N * I - O * H;_c[21] = O * G - M * I;_c[22] = M * H - N * G;_c[24] = H * L - I * K;_c[25] = I * J - G * L;_c[26] = G * K - H * J;gl.uniform4fv(shader._c, _c);gl.enable(gl.CULL_FACE);gl.cullFace(gl.BACK);gl.bindBuffer(gl.ARRAY_BUFFER, global.shaderInputBuffer0);gl.vertexAttribPointer(1, 3, gl.FLOAT, false, 24, 0);gl.vertexAttribPointer(0, 3, gl.FLOAT, false, 24, 12);gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, global.indexBuffer0);gl.drawElements(gl.TRIANGLES, 15000, gl.UNSIGNED_SHORT, 0);return shader.resetShader;})"
			},
			"createInstance": "(function(global, renderer){var instance = {global: global,renderer: renderer,ids: new Uint32Array(1),fstate: new Float32Array(1), shaders:{m_lambert2SG1:{uniform: {_b: new Float32Array(16)},transfer: {_a: new Float32Array(16)},}},itransforms: new Int32Array(1), ftransforms: new Float32Array(16), fboundingBoxes: new Float32Array(6), sceneSequence: 0,deformerSequence: 0,renderSequence: 0,viewProjectionMatrix: new Float32Array(16),fu0_28: new Float32Array(28),};var particlePools = instance.particlePools = {};instance.update = function(){++instance.sceneSequence;var fstate = instance.fstate;var buffers = global.buffers;var itransforms = instance.itransforms;var ftransforms = instance.ftransforms;var fboundingBoxes = instance.fboundingBoxes;ftransforms[0] = 1.0;ftransforms[1] = 0.0;ftransforms[2] = 0.0;ftransforms[3] = 0.0;ftransforms[4] = 0.0;ftransforms[5] = 1.0;ftransforms[6] = 0.0;ftransforms[7] = 0.0;ftransforms[8] = 0.0;ftransforms[9] = 0.0;ftransforms[10] = 1.0;ftransforms[11] = 0.0;ftransforms[12] = 0.0;ftransforms[13] = 0.0;ftransforms[14] = 0.0;ftransforms[15] = 1.0;itransforms[0] = 1;fboundingBoxes[0] = -0.00675559;fboundingBoxes[1] = 4.96722;fboundingBoxes[2] = -0.0061835;fboundingBoxes[3] = 7.06034;fboundingBoxes[4] = 4.96952;fboundingBoxes[5] = 3.15973;};instance.render = function(fviewMatrix, fprojectionMatrix, layerName, renderQueues){instance.renderSequence = ++global.sequence;var fviewProjectionMatrix = instance.viewProjectionMatrix;inka3d.matrix4x4Mul(fprojectionMatrix, fviewMatrix, fviewProjectionMatrix);var itransforms = instance.itransforms;var ftransforms = instance.ftransforms;var fboundingBoxes = instance.fboundingBoxes;var s_ = instance.shaders.m_lambert2SG1;var uniform = s_.uniform;var _b = uniform._b;var _a = s_.transfer._a;_a[0] = fviewMatrix[0];_a[1] = fviewMatrix[1];_a[2] = fviewMatrix[2];_a[3] = fviewMatrix[3];_a[4] = fviewMatrix[4];_a[5] = fviewMatrix[5];_a[6] = fviewMatrix[6];_a[7] = fviewMatrix[7];_a[8] = fviewMatrix[8];_a[9] = fviewMatrix[9];_a[10] = fviewMatrix[10];_a[11] = fviewMatrix[11];_a[12] = fviewMatrix[12];_a[13] = fviewMatrix[13];_a[14] = fviewMatrix[14];_a[15] = fviewMatrix[15];_b[0] = fprojectionMatrix[0];_b[1] = fprojectionMatrix[1];_b[2] = fprojectionMatrix[2];_b[3] = fprojectionMatrix[3];_b[4] = fprojectionMatrix[4];_b[5] = fprojectionMatrix[5];_b[6] = fprojectionMatrix[6];_b[7] = fprojectionMatrix[7];_b[8] = fprojectionMatrix[8];_b[9] = fprojectionMatrix[9];_b[10] = fprojectionMatrix[10];_b[11] = fprojectionMatrix[11];_b[12] = fprojectionMatrix[12];_b[13] = fprojectionMatrix[13];_b[14] = fprojectionMatrix[14];_b[15] = fprojectionMatrix[15];s_.renderJobs = null;var jobIt = renderQueues.begin;var jobEnd = renderQueues.end;if (itransforms[0]){if (jobIt != jobEnd){var shader = instance.shaders.m_lambert2SG1;var renderJob;renderJob = jobEnd;jobEnd = jobEnd.p;renderJob.next = shader.renderJobs;shader.renderJobs = renderJob;var f_rj = renderJob.frenderJob;f_rj[0] = ftransforms[0];f_rj[1] = ftransforms[1];f_rj[2] = ftransforms[2];f_rj[3] = ftransforms[3];f_rj[4] = ftransforms[4];f_rj[5] = ftransforms[5];f_rj[6] = ftransforms[6];f_rj[7] = ftransforms[7];f_rj[8] = ftransforms[8];f_rj[9] = ftransforms[9];f_rj[10] = ftransforms[10];f_rj[11] = ftransforms[11];f_rj[12] = ftransforms[12];f_rj[13] = ftransforms[13];f_rj[14] = ftransforms[14];f_rj[15] = ftransforms[15];renderJob.render = global.render.a_0;renderJob.instance = instance;}}renderQueues.begin = jobIt;var resetShader = renderQueues.resetShader;{var current = instance.shaders.m_lambert2SG1.renderJobs;while (current){resetShader = current.render(current, resetShader);current = current.next;}}renderQueues.resetShader = resetShader;};var fstate = instance.fstate;return instance;})",
			"doneInstance": "(function(instance){})",
			"sequence": 0,
			"attributes":
			{
				"time": {"t": 1, "b": 0, "e": 1}
			},
			"textureBindings":
			[
			],
			"objects":
			{
				"MeshShape[0]": 0
			}
		}
	},
	"numFiles": 1,
	"check": "(function(){return 0;})"
}